name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 1. 빌드 테스트
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ai-server, web-manager]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          target: base
          push: false
          tags: ${{ matrix.service }}:ci-build
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}

  # 2. 테스트 실행
  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        include:
          - service: ai-server
            test-cmd: "bash -c 'source .venv/bin/activate && pytest tests/test_basic.py -v'"
          - service: web-manager
            test-cmd: "uv run pytest tests/test_basic.py -v"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build ${{ matrix.service }} test stage
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          target: test
          push: false
          load: true
          tags: ${{ matrix.service }}:test
          cache-from: type=gha,scope=${{ matrix.service }}
      
      - name: Run test for ${{ matrix.service }}
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/${{ matrix.service }}/tests:/app-tests:ro \
            ${{ matrix.service }}:test \
            ${{ matrix.test-cmd }}

  # 3. Docker Compose 검증
  compose-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create .env file
        run: |
          cat > .env << 'EOF'
          AI_SERVER_IMAGE_NAME=ai-server
          AI_SERVER_IMAGE_TAG=test
          AI_SERVER_BUILD_ARG_POINT=dev
          WEB_MANAGER_IMAGE_NAME=web-manager
          WEB_MANAGER_IMAGE_TAG=test
          REDIS_IMAGE_NAME=redis
          REDIS_IMAGE_TAG=latest
          PROMETHEUS_IMAGE_TAG=latest
          GRAFANA_IMAGE_TAG=latest
          NODE_EXPORTER_IMAGE_TAG=latest
          NVIDIA_EXPORTER_IMAGE_TAG=latest
          SHARED_SHM_SIZE=2gb
          DISPLAY=:0
          HOST_IP=localhost
          HOST_OS_VERSION=ubuntu
          HOST_TIMEZONE=Asia/Seoul
          PORT_NUM=1
          REDIS_PORT=6379
          PROMETHEUS_PORT=9090
          GRAFANA_PORT=3000
          NODE_EXPORTER_PORT=9440
          NVIDIA_EXPORTER_PORT=9835
          SUPABASE_KEY=test-key
          SUPABASE_SERVICE_KEY=test-service-key
          EOF
      
      - name: Validate docker-compose.yml
        run: docker compose config --quiet

  # 4. 결과 확인
  ci-result:
    runs-on: ubuntu-latest
    needs: [build, test, compose-check]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          echo "=============================="
          echo "CI 결과"
          echo "=============================="
          echo "빌드:    ${{ needs.build.result }}"
          echo "테스트:  ${{ needs.test.result }}"
          echo "Compose: ${{ needs.compose-check.result }}"
          echo "=============================="
          
          if [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.compose-check.result }}" != "success" ]]; then
            echo "❌ CI 실패"
            exit 1
          fi
          
          echo "✅ CI 통과!"